type ProviderType<TCandidates extends Readonly<string[]>> = (
  candidates: TCandidates
) => Promise<TCandidates[number] | null> | (TCandidates[number] | null);

type FetcherType = (lang: string) => Promise<any> | any;

type RecorderType = {
  get: () => Promise<string | null> | (string | null);
  set: (lang: string) => Promise<any> | any;
  clear: () => Promise<any> | any;
};

export function createProvider(
  priorities: Readonly<string[]> = navigator.languages
) {
  return <TCandidates extends Readonly<string[]>>(candidates: TCandidates) => {
    let found: TCandidates[number] | null = null;
    priorities.some((lang) => {
      if (candidates.includes(lang)) {
        found = lang;
        return true;
      }
      lang = lang.split('-')[0];
      if (candidates.includes(lang)) {
        found = lang;
        return true;
      }
      return false;
    });
    return found as TCandidates[number] | null;
  };
}

const LOCAL_STORAGE_KEY = 'localStorage-find-language-key';
export const defRecorder = {
  get: () => {
    return localStorage.getItem(LOCAL_STORAGE_KEY);
  },
  set: (lang: string) => {
    localStorage.setItem(LOCAL_STORAGE_KEY, lang);
  },
  clear: () => {
    localStorage.removeItem(LOCAL_STORAGE_KEY);
  },
};

export class Languager<TCandidates extends Readonly<string[]>> {
  _candidates: TCandidates;
  _provider: ProviderType<TCandidates>;
  _fetcher?: FetcherType;
  _recorder: RecorderType;
  _record: boolean;

  _initialized = false;
  _lang?: TCandidates[number];
  constructor(
    candidates: TCandidates,
    provider: ProviderType<TCandidates> = createProvider(),
    fetcher?: FetcherType,
    recorder: RecorderType = defRecorder,
    record = true
  ) {
    this._candidates = candidates;
    this._provider = provider;
    this._fetcher = fetcher;
    this._recorder = recorder;
    this._record = record;
    //     this._finder = finder;
    //     // const uu = defaults(option, defOptions);
    //     this._options = option as any;
    //   }
  }

  protected async initialize() {
    if (this._initialized) return;

    // const { record, recorder } = this._options;
    if (this._record) {
      const lang = await this._recorder.get();
      if (lang !== null) {
        this._lang = lang;
        return;
      }
    }
    const found = await this._provider(this._candidates);
    // console.log(found, "foundfoundfound");
    if (!found) {
      throw Error('Provider cannot give a language code.');
    }
    this._lang = found;

    this._initialized = true;
  }
}

// export class UserLanguage<TLang extends string> {
//   _finder: FinderType<TLang>;
//   _options: Required<OptionsType>;
//   _lang: TLang | undefined;
//   _initialized = false;
//   constructor(finder: FinderType<TLang>, option: OptionsType = defOptions) {
//     this._finder = finder;
//     // const uu = defaults(option, defOptions);
//     this._options = option as any;
//   }
